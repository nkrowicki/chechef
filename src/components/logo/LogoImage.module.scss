$color-border: #6B3455;
$color-cherry: #D53D31;
$color-frosting: #E59693;
$cake-width: 140px;
$cake-height: 70px;
$duration: 5s;

.cherry {
  position: absolute;
  height: 24px;
  width: 24px;
  left: calc(50% - 12px);
  bottom: 0;
  animation: cherryY $duration both ease-in infinite;
  
  &:before, &:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
  }
  
  &:after {
    top: -60%;
    left: 50%;
    border: 3px solid $color-border;
    border-bottom-color: transparent;
    border-top-color: transparent;
    border-right-color: transparent;
    // transform-origin: bottom left;
    animation: stem $duration both infinite;
    @keyframes stem {
      from, 20% {
        transform: scale(0) rotate(45deg);
      }
      30%, to {
        transform: scale(1) rotate(45deg);
      }
    }
  }
  
  &:before {
    border: 3px solid $color-border;
    background-color: $color-cherry;
    background-image: radial-gradient(circle at 10% 10%, white, white 33%, transparent 33.1%);
    background-size: 80% 80%;
    background-repeat: no-repeat;
    animation: cherry $duration both infinite;
    @keyframes cherry {
      from, 20% {
        transform: scale(0);
      }
      30%, 80%, to {
        transform: scale(1);
      }
    }
  }
  $cherry-top: -75px;
  
  @keyframes cherryY {
    from, 20% {
      transform: translateY(-800%);
    }
    35% {
      transform: translateY($cherry-top);
      animation-timing-function: cubic-bezier(0, .5, .5, 1);
    }
    40% {
      transform: translateY($cherry-top - 12px);
      animation-timing-function: cubic-bezier(.5, 0, 1, 1);
    }
    48% {
      transform: translateY($cherry-top);
      animation-timing-function: cubic-bezier(0, .5, .5, 1);
    }
    52% {
      transform: translateY($cherry-top - 6px);
      animation-timing-function: cubic-bezier(.7, 0, 1, 1);
    }
    65% {
      transform-origin: bottom center;
      transform: translateY(0);
    }
    65.5% {
      transform-origin: bottom;
      transform: scaleY(0.8);
    }
    72% {
      transform: rotate(-15deg);
    }
    80% {
      transform: rotate(5deg);
      opacity: 1;
    }
    to {
      transform: none;
      opacity: 0;
    }
  }
}

.cakeOuter {
  height: 20vh;
  width: 200px;
  overflow: hidden;
  animation: cakeOuter $duration ease-in infinite;
  
  @keyframes cakeOuter {
    0% {
      transform-origin: bottom left;
      transform: translate(-50%, -100%) rotate(-20deg) scale(0);
    }
    20% {
      transform-origin: center;
      transform: none;
    }
  }
  
  &:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: calc(50% - #{$cake-width / 2});
    width: $cake-width;
    height: 10px;
    border-radius: 6px;
    border-bottom: 3px solid $color-border;
    animation: cake-bottom $duration step-end infinite;
    
    @keyframes cake-bottom {
      from, 35.1%, to {
        opacity: 0;
      }
      20%, 35% {
        opacity: 1;
      }
    }
  }
}
.cakeInner {
  position: absolute;
  top: 0;
  left: calc(50% - #{$cake-width / 2});
  width: $cake-width;
  height: 100%;
  transform: translate(0);
}

.cake {
  position: absolute;
  bottom: 0;
  left: calc(50% - #{$cake-height});
  width: $cake-width;
  height: $cake-height;
  border: 3px solid $color-border;
  border-top: none;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 6px;
  border-bottom-left-radius: 6px;
  animation: cake $duration cubic-bezier(.5, 0, .5, 1) infinite;
  transform-origin: bottom left;
  z-index: 1;
  
  @keyframes cake {
    from {
      transform: rotate(0);
    }
    5%, 15%, 25% {
      transform-origin: bottom left;
      transform: rotate(5deg);
    }
    10%, 20%, 30% {
      transform-origin: bottom right;
      transform: rotate(-5deg);
    }
    35% {
      transform: none;
    }
  }
  
  &:before {
    border: 3px solid $color-border;
    content: '';
    position: absolute;
    bottom: 100%;
    left: -3px;
    width: 84%;
    height: 60%;
    background-image: linear-gradient(
      to right,
      white,
      white 10%,
      $color-frosting 10.1%,
      $color-frosting 100%
    );
    transform-origin: bottom left;
    transform: rotate(16.5deg) skewX(-27deg);
    z-index: -10;
    border-bottom: none;
    border-right: none;
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
  }
  
  &:after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    background-color: #F6D7B8;
    background-image: linear-gradient(
      to bottom,
      #F6D7B8,
      #F6D7B8 20px,
      white 20.1px,
      white 30px,
      $color-frosting 30.1px,
      $color-frosting 50px,
      #F6D7B8 50.1px
    );
    border-radius: 3px;
    border-top-right-radius: 6px 3px;
  }
}

$bites: (
  -10% -10% 34px,
  -5% calc(50% - 20px) 45px,
  -10% calc(100% - 20px) 35px,
  0% -20% 40px,
  5% calc(50% - 20px) 40px,
  0% calc(100% - 30px) 30px,
  10% -30px 60px,
  15% calc(50% - 20px) 40px ,
  10% calc(100% - 30px) 40px ,
  15% -40px 60px ,
  25% calc(50% - 30px) 40px ,
  20% calc(100% - 30px) 50px ,
  30% -40px 60px ,
  40% calc(50% - 30px) 40px ,
  40% calc(100% - 40px) 50px ,
  50% -40px 60px ,
  60% calc(50% - 30px) 40px ,
  60% calc(100% - 40px) 50px ,
  60% -40px 66px,
  79% calc(50% - 30px) 50px ,
  80% calc(100% - 40px) 50px ,
);

.bite {
  position: absolute;
  height: 50px;
  width: 50px;
  border-radius: 50%;
  background-color: #fff;
  z-index: 2;
  
  $num-bites: length($bites);
  $double-num-bites: $num-bites * 2 + 10;
  @for $i from 1 through $num-bites {
    $bite: nth($bites, $i);
    &:nth-child(#{$i}) {
      animation: bite-#{$i} $duration ease-out both infinite;
      height: nth($bite, 3);
      width: nth($bite, 3);
      right: nth($bite, 1);
      top: nth($bite, 2);
      background-color: if(length($bite) == 4, nth($bite,4), white);
    }
    
    @keyframes bite-#{$i} {
      from, #{percentage((($i - 1) / $double-num-bites) + .4)} {
        transform: translateX(100%);
        display: none;
        opacity: 0;
      }
      #{percentage(($i / $double-num-bites) + .4)}, to {
        opacity: 1;
        display: block;
        transform: translateX(0);
        visibility: visible;
      }
    }
  }
  
  &:before {
    content: '';
    position: absolute;
    height: 10%;
    width: 10%;
  }
}


*, *:before, *:after {
  box-sizing: border-box;
  position: relative;
}